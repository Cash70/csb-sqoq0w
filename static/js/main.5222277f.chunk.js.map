{"version":3,"sources":["Chart.js","App.js","index.js"],"names":["Chart","_ref","parentToChild","_useState","useState","_useState2","_slicedToArray","linedata","setlinedata","_useState3","_useState4","linedatafinal","setlinedatafinal","useEffect","console","log","newdata","concat","linedata2","length","slice","_jsx","children","_jsxs","XYPlot","width","height","HorizontalGridLines","XAxis","hideLine","title","labelFormat","v","labelValues","tickValues","style","ticks","fontSize","color","YAxis","left","LineSeries","data","mqtt","require","options","protocol","username","password","keepalive","clientId","Math","random","toString","substr","client","connect","subscribe","App","note","setData","Fragment","msg","setMsg","on","topic","message","jsonval","JSON","parse","Hz","point","x","Date","now","y","className","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"mQAce,SAASA,EAAKC,GAAqB,IAAlBC,EAAaD,EAAbC,cAS9BC,EAA8BC,qBAAUC,EAAAC,YAAAH,EAAA,GAAnCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC1BI,EAAwCL,qBAAUM,EAAAJ,YAAAG,EAAA,GAA7CE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAKpCG,qBAAU,WACR,GAAIX,EAEF,GAAIK,EAAU,CACZO,QAAQC,IAAI,OAASb,GACrB,IAAIc,EAAUT,EAASU,OAAOf,GAM9BM,EAHeQ,EAKjB,MACER,EAAYN,EAIlB,IAEAW,qBAAU,WAER,IAAIK,EACAX,IAC0BW,EAAxBX,EAASY,QAAU,IAAiBZ,EAASa,MAAM,EAAG,KACzCb,EACjBK,EAAiBM,GACjBV,EAAYU,GAEhB,GAAG,CAACX,IAeJ,OACEc,cAAA,UAAAC,SACEC,eAACC,IAAM,CAACC,MAAO,IAAKC,OAAQ,IAAIJ,SAAA,CAE9BD,cAACM,IAAmB,IACpBN,cAACO,IAAK,CACJC,UAAQ,EACRC,MAAM,KACNC,YAAa,SAACC,GAAC,kBAAAf,OAAiBe,EAAC,EACjCC,YAAa,GACbC,WAAY,GACZC,MAtBU,CAChBC,MAAO,CACLC,SAAU,OACVC,MAAO,QAETR,MAAO,CACLO,SAAU,OACVC,MAAO,WAiBLjB,cAACkB,IAAK,CAACC,KAAM,KACbnB,cAACoB,IAAU,CAACC,KAAM/B,QAI1B,CCvFA,IAAIgC,EAAOC,EAAQ,KACfC,EAAU,CACZC,SAAU,MACVC,SAAU,GACVC,SAAU,GACVC,UAAW,GAEXC,SAAU,UAAYC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAGzDC,EAASZ,EAAKa,QAAQ,iCAAkCX,GAE5DU,EAAOE,UAAU,mBACjB3C,QAAQC,IAAI,sBAuCG2C,MArCf,WACE,IASIC,EATJxD,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BuC,EAAIrC,EAAA,GAAEuD,EAAOvD,EAAA,GAEpBI,EAAsBL,mBACpBmB,eAACsC,WAAQ,CAAAvC,SAAA,CACN,IACDD,cAAA,MAAAC,SAAI,QAAS,QAEhBZ,EAAAJ,YAAAG,EAAA,GALMqD,EAAGpD,EAAA,GAAEqD,EAAMrD,EAAA,GAuBlB,OAfA6C,EAAOS,GAAG,WAAW,SAAUC,EAAOC,GACpCN,EAAQ,GACRD,EAAOO,EAAQb,WAEf,IAAIc,EAAUC,KAAKC,MAAMV,GAEzB7C,QAAQC,IAAIoD,EAAQG,GAAGjB,YACvBU,EAAOI,EAAQG,GAAGjB,YAClB,IAAIkB,EAAQ,CAAC,CAAEC,EAAGC,KAAKC,MAAOC,EAAGR,EAAQG,KACzCV,EAAQW,EAEV,IAKEhD,eAAA,OAAKqD,UAAU,MAAKtD,SAAA,CAClBC,eAAA,UAAQqD,UAAU,aAAYtD,SAAA,CAC5BD,cAAA,MAAAC,SAAI,eACJC,eAAA,KAAAD,SAAA,CAAG,sBAAoBwC,EAAI,WAE7BzC,cAACrB,EAAK,CAACE,cAAewC,MAG5B,ECjDMmC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH5D,cAAC6D,aAAU,CAAA5D,SACTD,cAACqC,EAAG,M","file":"static/js/main.5222277f.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React from \"react\";\nimport \"react-vis/dist/style.css\";\nimport { useState, useEffect } from \"react\";\n\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineSeries\n} from \"react-vis\";\n\nexport default function Chart({ parentToChild }) {\n  /*var initvals = [\n    { x: 1, y: 5 },\n    { x: 2, y: 5 },\n    { x: 3, y: 15 }\n  ];*/\n\n  //var initvals = [{ x: Date.now(), y: 50 }];\n\n  var [linedata, setlinedata] = useState();\n  var [linedatafinal, setlinedatafinal] = useState();\n  //var [linedataSliced, setlinedataSliced] = useState();\n  //var point = { x: Date.now(), y: { parentToChild } };\n  //var point = [{ x: 4, y: parentToChild }];\n  //var point = { x: 4, y: 50.03 };\n  useEffect(() => {\n    if (parentToChild) {\n      //var point = [{ x: Date.now(), y: parentToChild }];\n      if (linedata) {\n        console.log(\"Data\" + parentToChild);\n        var newdata = linedata.concat(parentToChild);\n        //if (newdata.length > 3) var newdata2 = newdata.slice(1, 3);\n        //else\n        var newdata2 = newdata;\n        //   console.log(\"lenght: \" + newdata.length);\n        //if (newdata.length >= 60) newdata2 = newdata.slice(1, 59);\n        setlinedata(newdata2);\n        //setlinedataSliced(...linedataSliced.slice(1,3));\n      } else {\n        setlinedata(parentToChild);\n      }\n    }\n    //setlinedata([...linedata.slice(1, 3), point]);\n  });\n\n  useEffect(() => {\n    //setlinedata([...linedata.slice(1, 3), point]);\n    var linedata2;\n    if (linedata) {\n      if (linedata.length >= 300) linedata2 = linedata.slice(1, 299);\n      else linedata2 = linedata;\n      setlinedatafinal(linedata2);\n      setlinedata(linedata2);\n    }\n  }, [linedata]);\n\n  //tickValues={[0, 1.5, 2, 3, 4]}\n\n  const axisStyle = {\n    ticks: {\n      fontSize: \"14px\",\n      color: \"#333\"\n    },\n    title: {\n      fontSize: \"16px\",\n      color: \"#333\"\n    }\n  };\n\n  return (\n    <center>\n      <XYPlot width={400} height={300}>\n        \n        <HorizontalGridLines />\n        <XAxis\n          hideLine\n          title=\"Hz\"\n          labelFormat={(v) => `Value is ${v}`}\n          labelValues={[]}\n          tickValues={[]}\n          style={axisStyle}\n        />\n        <YAxis left={50}/>\n        <LineSeries data={linedatafinal} />\n      </XYPlot>\n    </center>\n  );\n}\n","import \"./styles.css\";\nimport React, { useState, Fragment } from \"react\";\nimport Chart from \"./Chart.js\";\n\nvar mqtt = require(\"mqtt\");\nvar options = {\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\",\n  keepalive: 20, // clientId uniquely identifies client\n  // choose any string you wish\n  clientId: \"mqttjs_\" + Math.random().toString(16).substr(2, 8)\n};\n\nvar client = mqtt.connect(\"mqtt://test.mosquitto.org:8081\", options);\n\nclient.subscribe(\"device/50HzData\");\nconsole.log(\"Client subscribed \");\n\nfunction App() {\n  const [data, setData] = useState(\"\");\n\n  const [msg, setMsg] = useState(\n    <Fragment>\n      {\" \"}\n      <em>...</em>{\" \"}\n    </Fragment>\n  );\n\n  var note;\n  client.on(\"message\", function (topic, message) {\n    setData(0);\n    note = message.toString(); // Updates React state with message\n\n    var jsonval = JSON.parse(note);\n\n    console.log(jsonval.Hz.toString());\n    setMsg(jsonval.Hz.toString());\n    var point = [{ x: Date.now(), y: jsonval.Hz }];\n    setData(point);\n    //client.end();\n  });\n  // Sets default React state\n  //\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Grid Watch</h1>\n        <p>Grid Frequency is: {msg}Hz</p>\n      </header>\n      <Chart parentToChild={data} />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}